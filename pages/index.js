import Head from 'next/head'
import Header from '../components/Header'
import Sidebar from '../components/Sidebar'
import Feed from '../components/Feed'
import Widgets from '../components/Widgets'
import Modal from '../components/Modal'

import { connectToDatabase } from '../util/mongodb'

import { AnimatePresence } from 'framer-motion'
import { getSession, useSession } from 'next-auth/react'
import { useRouter } from 'next/router'
import { useRecoilState } from 'recoil'
import { modalState, modalTypeState } from '../atoms/modalAtom'


export default function Home({ posts, articles }) {
  const router = useRouter()
  const { status } = useSession({
    required: true,
    onUnauthenticated() {
      // The user is not authenticated, handle it here.
      router.push("/home")
    }
  })

  const [modalOpen, setModalOpen] = useRecoilState(modalState)
  const [modalType, setModalType] = useRecoilState(modalTypeState)

  return (
    <div className=' dark:bg-black dark:text-white h-screen overflow-y-scroll md:space-y-6'>
      <Head>
        <title>LinkedIn</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
      <Header />

      <main>
        <div className='flex justify-center gap-x-5 px-4 sm:px-12'>
          <div className='flex flex-col md:flex-row gap-5'>
            <Sidebar />
            <Feed posts={posts}/>
          </div>
          <Widgets articles={articles} />
          <AnimatePresence>
            {modalOpen && (
              <Modal handleClose={() => setModalOpen(false)} type={modalType} />
            )}
          </AnimatePresence>
        </div>
      </main>
    </div>
  )
}

export async function getServerSideProps(context) {
  // Check if user is authenticated on the server
  const session = await getSession(context)
  if(!session) {
    return {
      redirect: {
        permanent: false,
        destination: "/home"
      }
    }
  }

  // Get posts on SSR
  const { db } = await connectToDatabase();
  const posts = await db.collection('posts').find().sort({ timestamp: -1 }).toArray()

  // Get Google News API
  const news = await fetch(
    `http://newsapi.org/v2/top-headlines?apiKey=${process.env.NEWS_API_KEY}&country=us`
  ).then((res) => res.json())

  return {
    props: {
      session,
      articles: news.articles,
      posts: posts.map((post) => ({
        _id: post._id.toString(),
        input: post.input,
        photoUrl: post.photoUrl,
        username: post.username,
        email: post.email,
        userImg: post.userImg,
        createdAt: post.createdAt
      }))
    }
  }
  
}